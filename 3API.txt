Java的API
    JDK中提供给我们使用的类，这些类将底层的代码实现封装了起来，只需要学习如何使用。
    在JDK安装目录下有个src.zip文件，这个文件解压缩后里面的内容是所有Java类的源文件。可以在其中查看相对应的类的源码。
    打开源代码进行查看，这种方式过于麻烦，可以通过查帮助文档的方式，来了解Java提供的API如何使用。

Object类
    是Java语言的根类，既所有类的父类。
    它中描述的所有方法子类都可以使用。
    所有类在创建对象的时候，最终找的父类就是Object。

equals方法
    比较两个对象是否相同，其实是比较两个对象的内存地址。
    内部使用的就是==比较运算符
    在开发中要比较两个对象是否相同，经常会根据对象中的属性值进行比较，也就是在开发经常需要子类重写equals方法根据对象的属性值进行比较。
        /*
            描述人这个类，并定义功能根据年龄判断是否是同龄人
            由于要根据指定类的属性进行比较，这时只要覆盖Object中的equals方法
            在方法体中根据类的属性值进行比较
        */
            class Person extends Object{
                int age ;
            //复写父类的equals方法，实现自己的比较方式
            public boolean equals(Object obj) {
                //判断当前调用equals方法的对象和传递进来的对象是否是同一个
                if(this == obj){
                    return true;
                }
                //判断传递进来的对象是否是Person类型
                if(!(obj instanceof Person)){
                    return false;
                }
                //将obj向下转型为Perosn引用，访问其属性
                Person p = (Person)obj;
                return this.age == p.age;
                }
            }
    注意：在复写Object中的equals方法时，
        一定要注意public boolean equals(Object obj)的参数是Object类型，
        在调用对象的属性时，一定要进行类型转换，在转换之前必须进行类型判断。

toString
    返回该对象的字符串表示，内容就是对象的类型+@+内存地址值。
    由于toString方法返回的结果是内存地址，而在开发中，
        经常需要按照对象的属性得到相应的字符串表现形式，因此也需要重写它。
        class Person extends Object{
            int age ;
            //根据Person类的属性重写toString方法
            public String toString() {
                return "Person [age=" + age + "]";
            }
        }

String类
    概述：字符串
    String str="a";
    str="b";
        字符串是常量；它们的值在创建之后不能更改，一旦这个字符串确定了，
        那么就会在内存区域中就生成了这个字符串。字符串本身不能改变，
        但str变量中记录的地址值是可以改变的。

        使用双引号的方式创建对象与new的方式创建对象，有什么不同呢？看如下程序与图解：
        String s3 = "abc";
        String s4 = new String("abc");
        System.out.println(s3==s4);//false
        System.out.println(s3.equals(s4));//true,
        //因为String重写了equals方法，建立了字符串自己的判断相同的依据（通过字符串对象中的字符来判断）

        s3和s4的创建方式有什么不同呢？
        s3创建，在内存中只有一个对象。这个对象在字符串常量池中
        s4创建，在内存中有两个对象。一个new的对象在堆中，一个字符串本身对象，在字符串常量池中

    String类构造方法
        String()
            初始化一个新创建的String对象，使其表示一个空字符序列。
        String(byte[] bytes)
            通过使用平台的默认字符集解码指定的byte数组，构造一个新的String。
        String(byte[] bytes,int offset,int length)
            通过使用平台的默认字符集解码指定的byte子数组，构造一个新的String。
        String(char[] value)
            分配一个新的String，使其表示字符数组参数中当前包含的字符序列。
        String (char[] value,int offset,int count)
            分配一个新的String，它包含取自字符数组参数一个子数组的字符。
        String(String original)
            初始化一个新创建的String对象，使其表示一个与参数相同的字符序列。

            String s1 = new String(); //创建String对象，字符串中没有内容
            byte[] bys = new byte[]{97,98,99,100};
            String s2 = new String(bys); // 创建String对象，把数组元素作为字符串的内容
            String s3 = new String(bys, 1, 3); //创建String对象，把一部分数组元素作为字符串的内容，参数offset为数组元素的起始索引位置，参数length为要几个元素   
            char[] chs = new char[]{’a’,’b’,’c’,’d’,’e’};
            String s4 = new String(chs); //创建String对象，把数组元素作为字符串的内容
            String s5 = new String(chs, 0, 3);//创建String对象，把一部分数组元素作为字符串的内容，参数offset为数组元素的起始索引位置，参数count为要几个元素
            String s6 = new String(“abc”); //创建String对象，字符串内容为abc

    String类的方法查找
        length()
            返回此字符串的长度
        substring(int beginIndex)
            返回一个新的字符串，它是此字符串的一个子字符串。
        substring(int beginIndex,int endIndex)
            返回一个新的字符串，它是此字符串的一个子字符串。
        startsWith(String prefix)
            测试此字符串是否以指定的前缀开始
        endsWith(String suffix)
            测试此字符串是否以指定的后缀结束
        contains(CharSequence s)
            当且仅当此字符串包含指定的char值序列时，返回true
        indexOf(String str)
            返回指定字符串在此字符串中第一次出现处的索引
        getBytes()
            使用平台默认字符集将此String编码为byte序列，并将结果储存到一个新的byte数组中
        toCharArray()
            将此字符串转换为一个新的字符数组
        equals(Object anObject)
            将此字符串与指定的对象比较
        equalsIgnoreCase(String anotherString)
            将此String与另一个String比较，不考虑大小写
        toString()
            返回此对象本身（它已经是一个字符串）
        charAt(i)
            获取指定位置上的字符
            char b = str.charAt(0);

        判断该字符串的内容是否为空的字符串
        获取给定的字符，在该字符串中第一次出现的位置
        获取该字符串中指定位置上的字符
        把该字符串转换成 小写字符串
        把该字符串转换成 大写字符串
        在该字符串中，将给定的旧字符，用新字符替换
        在该字符串中， 将给定的旧字符串，用新字符串替换
        去除字符串两端空格，中间的不会去除，返回一个新字符串

字符串缓冲区
    StringBuffer类
        在学习String类时，API中说字符串缓冲区支持可变的字符串，什么是字符串缓冲区呢？接下来我们来研究下字符串缓冲区。
        查阅StringBuffer的API，StringBuffer又称为可变字符序列，它是一个类似于 String 的字符串缓冲区，通过某些方法调用可以改变该序列的长度和内容。
        原来StringBuffer是个字符串的缓冲区，即就是它是一个容器，容器中可以装很多字符串。并且能够对其中的字符串进行各种操作。

        append(String str)
            将指定的字符串追加到此字符序列。
        delete(int start, int end)
            移除此序列的子字符串中的字符。
        insert(int offset, String str)
            将字符串插入此字符序列中。
        replace(int start, int end, String str)
            使用给定String中的字符替换此序列的子字符串中的字符。
        reverse()
            将此字符序列用其反转形式取代。
        toString()
            返回此序列中数据的字符串表示形式。
        
        创建一个字符串缓冲区对象。用于存储数据。
        StringBuffer sb = new StringBuffer();
        sb.append("haha"); //添加字符串
        sb.insert(2, "it");//在指定位置插入
        sb.delete(1, 4);//删除
        sb.replace(1, 4, "cast");//替换指定范围内的内容
        String str = sb.toString();
        注意：append、delete、insert、replace、reverse方法调用后，返回值都是当前对象自己，所以说，StringBuffer它可以改变字符序列的长度和内容。

        链式调用
        在我们开发中，会遇到调用一个方法后，返回一个对象的情况。然后使用返回的对象继续调用方法。这种时候，我们就可以把代码现在一起，如append方法一样，
        String str = sb.append(true).append("hehe").toString();    //truehehe
        无论多少数据，数据是什么类型不重要，只要最终变成字符串就可以使用StringBuffer这个容器。
        StringBuilder类
            字符串缓冲区
            与StringBuffer兼容的API，该类被设计用作StringBuffer的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍）。如果可能，建议优先采用该类，因为在大多数实现中，它比StringBuffer更快。

正则表达式regex
    字符：x
    含义：代表的是字符x
    例如：匹配规则为 "a"，那么需要匹配的字符串内容就是 ”a”

    字符：\\
    含义：代表的是反斜线字符'\'
    例如：匹配规则为"\\" ，那么需要匹配的字符串内容就是 ”\”

    字符：\t
    含义：制表符
    例如：匹配规则为"\t" ，那么对应的效果就是产生一个制表符的空间

    字符：\n
    含义：换行符
    例如：匹配规则为"\n"，那么对应的效果就是换行,光标在原有位置的下一行

    字符：\r
    含义：回车符
    例如：匹配规则为"\r" ，那么对应的效果就是回车后的效果,光标来到下一行行首

    字符类：[abc]
    含义：代表的是字符a、b 或 c
    例如：匹配规则为"[abc]" ，那么需要匹配的内容就是字符a，或者字符b，或字符c的一个

    字符类：[^abc]
    含义：代表的是除了 a、b 或 c以外的任何字符
    例如：匹配规则为"[^abc]"，那么需要匹配的内容就是不是字符a，或者不是字符b，或不是字符c的任意一个字符

    字符类：[a-zA-Z]
    含义：代表的是a 到 z 或 A 到 Z，两头的字母包括在内
    例如：匹配规则为"[a-zA-Z]"，那么需要匹配的是一个大写或者小写字母

    字符类：[0-9]
    含义：代表的是 0到9数字，两头的数字包括在内
    例如：匹配规则为"[0-9]"，那么需要匹配的是一个数字

    字符类：[a-zA-Z_0-9]
    含义：代表的字母或者数字或者下划线(即单词字符)
    例如：匹配规则为" [a-zA-Z_0-9] "，那么需要匹配的是一个字母或者是一个数字或一个下滑线

    预定义字符类：.
    含义：代表的是任何字符
    例如：匹配规则为" . "，那么需要匹配的是一个任意字符。如果，就想使用 . 的话，使用匹配规则"\\."来实现

    预定义字符类：\d
    含义：代表的是 0到9数字，两头的数字包括在内，相当于[0-9]
    例如：匹配规则为"\d "，那么需要匹配的是一个数字

    预定义字符类：\w
    含义：代表的字母或者数字或者下划线(即单词字符)，相当于[a-zA-Z_0-9]
    例如：匹配规则为"\w "，，那么需要匹配的是一个字母或者是一个数字或一个下滑线

    边界匹配器：^
    含义：代表的是行的开头
    例如：匹配规则为^[abc][0-9]$ ，那么需要匹配的内容从[abc]这个位置开始, 相当于左双引号

    边界匹配器：$
    含义：代表的是行的结尾
    例如：匹配规则为^[abc][0-9]$ ，那么需要匹配的内容以[0-9]这个结束, 相当于右双引号

    边界匹配器：\b
    含义：代表的是单词边界
    例如：匹配规则为"\b[abc]\b" ，那么代表的是字母a或b或c的左右两边需要的是非单词字符([a-zA-Z_0-9])

    数量词：X?
    含义：代表的是X出现一次或一次也没有
    例如：匹配规则为"a?"，那么需要匹配的内容是一个字符a，或者一个a都没有

    数量词：X*
    含义：代表的是X出现零次或多次
    例如：匹配规则为"a*" ，那么需要匹配的内容是多个字符a，或者一个a都没有

    数量词：X+
    含义：代表的是X出现一次或多次
    例如：匹配规则为"a+"，那么需要匹配的内容是多个字符a，或者一个a

    数量词：X{n}
    含义：代表的是X出现恰好 n 次
    例如：匹配规则为"a{5}"，那么需要匹配的内容是5个字符a

    数量词：X{n,}
    含义：代表的是X出现至少 n 次
    例如：匹配规则为"a{5, }"，那么需要匹配的内容是最少有5个字符a

    数量词：X{n,m}
    含义：代表的是X出现至少 n 次，但是不超过 m 次
    例如：匹配规则为"a{5,8}"，那么需要匹配的内容是有5个字符a 到 8个字符a之间

    字符串中涉及正则表达式的常用方法
        str.matches(String regex)
            告知此字符串是否匹配给定的正则表达式
        str.split(String regex)
            根据给定正则表达式的匹配拆分此字符串
        str.replaceAll(String regex, String replacement)
            使用给定的repacement替换词字符串所匹配给定的正则表达式的子字符串。

Date类
    瞬间，精确到毫秒
        创建日期对象，把当前的毫秒值转成日期对象
        Date date = new Date(1600000000000L);
        System.out.println(date);
        打印date时调用了 toString()

DateFormat类
    对时间进行格式化  日期->文本 或者 文本->日期
        .SimpleDateFormat(String pattern)
            用给定的模式和默认语言环境的日期格式符号构造SimpleDateFormat
        .format(Date date)
            将一个Date格式化为日期/时间字符串
        
            DateFormat df = new SimpleDateFormat("yyyy-MM-dd"); 对日期进行格式化
            Date date = new Date(160000000000000L);
            String str_time =df.format(date);
            System.out.println(str_time);

            当出现y时，会将y替换成年
            当出现d时，会将d替换成日
            当出现M时，会将M替换成月
            当出现H时，会将H替换成时
            当出现m时，会将m替换成分
            当出现s时，会将s替换成秒

        .parse(String source)
            从给定字符串的开始解析文本，以生成一个日期
        
Calendar类
    日历类，替换掉了许多Date的方法，静态变量，方便获取

    Calendar.getInstance();
        使用默认时区和语言获得一个日历
    
